{"version":3,"sources":["components/Constants.js","utils/color_utils.js","components/disk.jsx","components/tower.jsx","components/end_screen.jsx","utils/game_utils.js","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["Types","colorPicker","value","l","concat","DragSource","isDragging","props","monitor","getItem","id","beginDrag","towerId","connect","connectDragSource","dragSource","_ref","max","react_default","a","createElement","className","style","width","height","backgroundColor","opacity","towerTarget","drop","from","parseInt","to","makeMove","DropTarget","connectDropTarget","dropTarget","isOver","disks","moveDisk","map","disk","components_disk","key","EndScreen","resetGame","closeModal","onClick","setupBoard","numDisks","Object","toConsumableArray","Array","keys","x","board","result","tower","isValidMove","unshift","shift","length","gameWon","Game","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","state","won","showModal","_this$state$board","slicedToArray","left","middle","right","components_tower","end_screen","Component","App","cjs","backend","HTML5Backend","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3703646c.chunk.js","sourcesContent":["export const Types = {\n  DISK: 'disk'\n};\n","export const colorPicker = value => {\n  const l = `${57 - (value * 25)}%`;\n  return `hsl(3, 76%, ${l})`;\n}\n","import React from 'react';\nimport { DragSource } from 'react-dnd';\nimport { Types } from './Constants';\nimport { colorPicker } from '../utils/color_utils';\n\nimport '../styles/Disk.css';\n\nconst diskSource = {\n  isDragging(props, monitor) {\n    return monitor.getItem().id === props.id;\n  },\n\n  beginDrag(props) {\n    return { \n      id: props.id,\n      towerId: props.towerId\n    }\n  }\n};\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  }\n}\n\nconst Disk = ({ connectDragSource, isDragging, value, max, towerId }) => {\n  return connectDragSource(\n    <div className=\"disk flex-container\" \n      style={{ \n        width: `${(value / max) * 100}%`, \n        height: `${240 / max}px`,\n        backgroundColor: colorPicker(value / max),\n        opacity: isDragging ? 0.5 : 1,\n      }}>\n    </div>\n  );\n}\n\nexport default DragSource(Types.DISK, diskSource, collect)(Disk);\n","import React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport { Types } from './Constants';\nimport Disk from './disk';\n\nimport '../styles/Tower.css';\n\nconst towerTarget = {\n  drop(props, monitor) {\n    const from = parseInt(monitor.getItem().towerId) - 1;\n    const to = parseInt(props.id) - 1;\n    props.makeMove(from, to);\n  }\n}\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver()\n  }\n}\n\nconst Tower = ({ connectDropTarget, isOver, id, disks, max, moveDisk }) => {\n  return connectDropTarget(\n    <div id={id} className=\"tower-background flex-container\">\n      <div className=\"tower flex-container vertical\">\n        <div className=\"tower-disks flex-container vertical\">\n          {disks.map(disk => <Disk key={disk} moveDisk={moveDisk} value={disk} max={max} towerId={id} />)}\n        </div>\n        <div className=\"tower-base flex-container\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default DropTarget(Types.DISK, towerTarget, collect)(Tower);\n","import React from 'react';\n\nimport '../styles/EndScreen.css';\n\nconst EndScreen = ({ resetGame, closeModal }) => (\n  <div className=\"end-screen\">\n    <div className=\"end-screen-content flex-container vertical\">\n      <div className=\"close-modal\" onClick={closeModal}>X</div>\n      <h2>You won!</h2>\n      <button className=\"button\" onClick={resetGame}>Play again</button>\n    </div>\n  </div>\n);\n\nexport default EndScreen;\n","export const setupBoard = numDisks => {\n  return [\n    [...Array(numDisks).keys()].map(x => ++x),\n    [],\n    []\n  ]\n}\n\nexport const moveDisk = (board, from, to) => {\n  const result = board.map(tower => [...tower]);\n  if (isValidMove(result, from, to)) {\n    result[to].unshift(result[from].shift());\n  }\n  return result;\n}\n\nconst isValidMove = (board, from, to) => {\n  return from !== to \n    && board[from]\n    && (board[to].length === 0 || board[from][0] < board[to][0]);\n}\n\nexport const gameWon = (board, numDisks) => {\n  return board[0].length === 0\n    && (board[1].length === numDisks || board[2].length === numDisks);\n}\n","import React, { Component } from 'react';\nimport Tower from './tower';\nimport EndScreen from './end_screen';\nimport { \n  setupBoard,\n  moveDisk,\n  gameWon } from '../utils/game_utils';\n\nimport '../styles/Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: setupBoard(this.props.numDisks),\n      won: false,\n      showModal: false\n    };\n  }\n\n  makeMove = (from, to) => {\n    this.setState({\n      board: moveDisk(this.state.board, from, to), \n    }, () => {\n      if (gameWon(this.state.board, this.props.numDisks)) {\n        this.setState({ \n          won: true,\n          showModal: true\n        });\n      }\n    });\n  }\n\n  resetGame = () => {\n    this.setState({\n      board: setupBoard(this.props.numDisks),\n      won: false,\n      showModal: false\n    });\n  }\n\n  closeModal = () => {\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    const [left, middle, right] = this.state.board;\n    const { numDisks } = this.props;\n    return (\n      <div className=\"game flex-container\">\n        <Tower \n          id=\"1\"\n          makeMove={this.makeMove}\n          disks={left} \n          max={numDisks} />\n        <Tower \n          id=\"2\"\n          makeMove={this.makeMove}\n          disks={middle} \n          max={numDisks} />\n        <Tower \n          id=\"3\"\n          makeMove={this.makeMove}\n          disks={right} \n          max={numDisks} />\n        {this.state.showModal && <EndScreen resetGame={this.resetGame} closeModal={this.closeModal} />}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Game from './components/game';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"App flex-container vertical\">\n          <h1>Towers of Hanoi</h1>\n          <Game numDisks={3} />\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}